version: '3.8'
services:

# Contenedor para la aplicacion web
  web:
    build: . # Construir la imagen desde el Dockerfile en el directorio actual.
    ports:
      - "8080:80" # Mapear el puerto 80 del contenedor al puerto 8080 del host.
    environment: # Declara las varibles de entorno necesarias para la conexión con Base de Datos
      DB_HOST: database
      DB_NAME: cooperativa

      DB_USER: web_user_socio
      DB_PASSWORD: socio_password
      
      DB_USER_ADMIN: web_user_admin
      DB_PASSWORD_ADMIN: admin_password
    networks:
      app-network:
        ipv4_address: 172.18.0.2
    depends_on:
      - database

# Contenedor para realizar backups
  backup:
    image: alpine:latest
    depends_on:
      - database
    environment:
      DB_HOST: database
      DB_NAME: cooperativa
      DB_USER: backup_user
      DB_PASSWORD: backup_password
    networks:
      app-network:
        ipv4_address: 172.18.0.3
    volumes:
      - ./source:/data:ro
      - ./backups:/backups
      - ./backup-scripts:/scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

# Contenedor para la base de datos MySQL
  database:
    image: mysql:8.0 # Usar MySQL versión 8.0.
    environment: # Variables de entorno para configurar MySQL
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: cooperativa
    networks:
      app-network:
        ipv4_address: 172.18.0.4
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d # Monta el directorio con los scripts SQL.

# Configuración de red 
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24

# Define un volumen para persistir los datos de MySQL  
volumes:
  mysql_data: